Pinned by Answers dotcom
@answersdotcom-bg2lx
3 weeks ago
# 1.1 Implement a recursive function to calculate the factorial of a given number
def recur_factorial(n):  
   if n == 1:  
       return n  
   else:  
       return n*recur_factorial(n-1)  
# take input from the user  
num = int(input("Enter a number: "))  
# check is the number is negative  
if num < 0:  
   print("Sorry, factorial does not exist for negative numbers")  
elif num == 0:  
   print("The factorial of 0 is 1")  
else:  
   print("The factorial of",num,"is",recur_factorial(num))

# 1.2 Write a program that determines whether a year entered by the user is a leap year or not using ifelif-else statements.

year = 2023

# To get year (integer input) from the user
# year = int(input("Enter a year: "))

# divided by 100 means century year (ending with 00)
# century year divided by 400 is leap year
if (year % 400 == 0) and (year % 100 == 0):
    print("{0} is a leap year".format(year))

# not divided by 100 means not a century year
# year divided by 4 is a leap year
elif (year % 4 ==0) and (year % 100 != 0):
    print("{0} is a leap year".format(year))

# if not divided by both 400 (century year) and 4 (not century year)
# year is not leap year
else:
    print("{0} is not a leap year".format(year);

class BankAccount:

    def __init__(self, account_number, account_holder_name, initial_balance=0.0):
        self._account_number = account_number
        self._account_holder_name = account_holder_name
        self._account_balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self._account_balance += amount
            print("Deposited {}. New balance: {}".format(amount, self._account_balance))
        else:
            print("Invalid deposit amount.")

    def withdraw(self, amount):
        if amount > 0 and amount <= self._account_balance:
            self._account_balance -= amount
            print("Withdraw {}. New balance: {}".format(amount, self._account_balance))
        else:
            print("Invalid withdraw amount or insufficient balance.")

    def display_balance(self):
        print("Account balance for {} (Account #{}): {}".format(self._account_holder_name, self._account_number, self._account_balance))

# create an instance of the BankAccount class
account = BankAccount(account_number="123456789", account_holder_name="Hema", initial_balance=5000.0)

# Test deposit and withdraw functions
account.display_balance()
account.deposit(500.0)
account.withdraw(200.0)
account.withdraw(20000.0)
account.display_balance()

# Define the base class Player
class Player:
    def play(self):
        print("The player is playing cricket.")

# Define the derived class Batsman
class Batsman(Player):
    def play(self):
        print("The batsman is batting.")

# Define the derived class Bowler
class Bowler(Player):
    def play(self):
        print("The bowler is bowling.")

# Create objects of Batsman and Bowler classes
batsman = Batsman()
bowler = Bowler()

# Call the play method for each object
batsman.play()
bowler.play()

"""write a function called linear_ search_ product that takes the list of products and a target product 
Name as input. The function should perform a linear search to find the target product in the list and
return a list of indicates of all occurrences of the product if found, or an empty list if the product is not
found.
"""


def linearSearchProduct(productlist,targetProduct):
  indices = []

  for index, product in enumerate(productlist):
     if product == targetProduct:
      indices.append(index)

  return indices


# Example usage:
products = ["shoes","boot","loafer","shoes","sandal","shoes"]
target = "shoes"
target2 = 'apple'
result = linearSearchProduct(products,target)
print (result)

'''
Implement a function called sort_student that takes a list of student objects as input and sorts the
list based  on their CGPA (Cumulative Grade Point Average) in descending order. Each student object
has the following attributes: name (string), roll_number (string), and cgpa (float). Test the function
with different input lists of students.
'''

class Student:

  def __init__(self, name, roll_number, cpga):
    self.name = name
    self.roll_number = roll_number
    self.cpga = cpga


def sort_student(student_list):
  # Sort the list of students in descending order of CPGA
  sorted_students = sorted(student_list,
                           key=lambda student: student.cpga,
                           reverse=True)
  # Syntax - lambda arg:exp
  return sorted_students


# Example usage:
students = [
    Student("Hema", "A123", 7.6),
    Student("Raji", "A124", 8.9),
    Student("Sanju", "A125", 9.1),
    Student("Kavi", "A126", 9.9),
]

sorted_students = sort_student(students)

# Print the sorted list of students
for student in sorted_students:
  print("Name: {}, Roll Number: {}, CPGA: {}".format(student.name,
                                           student.roll_number,
                          student.cpga))
